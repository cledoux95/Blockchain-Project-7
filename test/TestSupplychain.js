// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originMusicianID = accounts[1]
    const originMusicianName = "John Doe"
    const originMusicianInformation = "Yarray Valley"
    var songID = sku + upc
    const songNotes = "Best beans for Espresso"
    const songPrice = web3.utils.toWei("1", "ether")
    var songState = 0
    const producerID = accounts[2]
    const distributorID = accounts[3]
    const listenerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Musician: accounts[1] ", accounts[1])
    console.log("Producer: accounts[2] ", accounts[2])
    console.log("Distributor: accounts[3] ", accounts[3])
    console.log("Listener: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function writeMelody() that allows a Musician to write the song melody", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Add musician as authorized caller
        await supplyChain.addMusician(originMusicianID)
        
        // Watch the emitted event Harvested()
        supplyChain.MelodyWritten((error, result) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.writeMelody(upc, originMusicianID, originMusicianName, originMusicianInformation, songNotes, {from: originMusicianID, gas: 2500000})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchSongBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchSongBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originMusicianID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMusicianID, 'Error: Missing or Invalid originMusicianID')
        assert.equal(resultBufferOne[4], originMusicianName, 'Error: Missing or Invalid originMusicianName')
        assert.equal(resultBufferOne[5], originMusicianInformation, 'Error: Missing or Invalid originMusicianInformation')

        assert.equal(resultBufferTwo[6], 100, 'Error: Musician shares are intialized incorrectly')
        assert.equal(resultBufferTwo[7], 0, 'Error: Producer shares are intialized incorrectly')
        assert.equal(resultBufferTwo[8], 0, 'Error: Distributor shares are intialized incorrectly')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function writeLyrics() that allows a musician to write the the song lyrics", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        supplyChain.LyricsWritten((error, result) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.writeLyrics(upc, {from: originMusicianID, gas: 2500000})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchSongBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })

    // 3rd Test
    it("Testing smart contract function playTracks() that allows a musician to play the song tracks for recording", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        supplyChain.Played((error, result) => {
            eventEmitted = true
        })

        let producerShares = 70

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.playTracks(upc, producerShares, {from: originMusicianID, gas: 2500000})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchSongBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[6], 30, 'Error: Musician shares are intialized incorrectly')
        assert.equal(resultBufferTwo[7], 70, 'Error: Producer shares are intialized incorrectly')
        assert.equal(resultBufferTwo[8], 0, 'Error: Distributor shares are intialized incorrectly')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    }) 

    // 4th Test
    it("Testing smart contract function recordTracks() that allows a producer to record the song tracks", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Add musician as authorized caller
        await supplyChain.addProducer(producerID)
        
        // Watch the emitted event Harvested()
        supplyChain.Recorded((error, result) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.recordTracks(upc, {from: producerID, gas: 2500000})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchSongBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[9], producerID, 'Error: Missing or Invalid producerID')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    }) 

    // 5th Test
    it("Testing smart contract function approveTracks() that allows a musician to approve the recorded song", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        supplyChain.Approved((error, result) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.approveTracks(upc, {from: originMusicianID, gas: 2500000})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchSongBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchSongBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], producerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    }) 

    // 6th Test
    it("Testing smart contract function releaseSong() that allows a producer to release the song to a distributor", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Released()
        supplyChain.Released((error, result) => {
            eventEmitted = true
        })

        let songPrice = web3.utils.toWei("1", "ether")
        let distributorShares = 40

        // Mark a song as Released by calling function releaseSong()
        await supplyChain.releaseSong(upc, songPrice, distributorShares, {from: producerID, gas: 2500000})

        // Retrieve the just now saved item from blockchain by calling function fetchSong...()
        const resultBufferTwo = await supplyChain.fetchSongBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[6], 30, 'Error: Musician shares are intialized incorrectly')
        assert.equal(resultBufferTwo[7], 30, 'Error: Producer shares are intialized incorrectly')
        assert.equal(resultBufferTwo[8], 40, 'Error: Distributor shares are intialized incorrectly')
        assert.equal(resultBufferTwo[4], web3.utils.toWei("1", "ether"), 'Error: Song Price is incorrect')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })   

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Add musician as authorized caller
        await supplyChain.addDistributor(distributorID)
        
        // Watch the emitted event Harvested()
        supplyChain.Received((error, result) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.receiveSong(upc, {from: distributorID, gas: 2500000})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchSongBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchSongBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[10], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        supplyChain.Purchased((error, result) => {
            eventEmitted = true
        })

        await supplyChain.addListener(listenerID)

        const musicianBalanceBefore = await web3.eth.getBalance(originMusicianID)
        const producerBalanceBefore = await web3.eth.getBalance(producerID)
        const distributorBalanceBefore = await web3.eth.getBalance(distributorID)

        let paymentAmount = web3.utils.toWei("3", "ether")

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.purchaseSong(upc, {from: listenerID, value: paymentAmount, gas: 2500000})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchSongBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchSongBufferTwo.call(upc)

        const musicianBalanceAfter = await web3.eth.getBalance(originMusicianID)
        const producerBalanceAfter = await web3.eth.getBalance(producerID)
        const distributorBalanceAfter = await web3.eth.getBalance(distributorID)

        // Verify the result set
        assert.equal(resultBufferOne[2], listenerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[11], listenerID, 'Error: Missing or Invalid producerID')
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 

        // Uncomment below to see payouts
        // console.log('Musician Payout: ' + web3.utils.fromWei(((resultBufferTwo[4] * resultBufferTwo[6]) / 100).toString(), "ether") + ' Ether')
        // console.log('Producer Payout: ' + web3.utils.fromWei(((resultBufferTwo[4] * resultBufferTwo[7]) / 100).toString(), "ether") + ' Ether')
        // console.log('Distributor Payout: ' + web3.utils.fromWei(((resultBufferTwo[4] * resultBufferTwo[8]) / 100).toString(), "ether") + ' Ether')

        // Verify payment handling
        assert.equal(musicianBalanceBefore, musicianBalanceAfter - ((resultBufferTwo[4] * resultBufferTwo[6]) / 100), 'Error: Musician Payout Incorrect') 
        assert.equal(producerBalanceBefore, producerBalanceAfter - ((resultBufferTwo[4] * resultBufferTwo[7]) / 100), 'Error: Producer Payout Incorrect') 
        assert.equal(distributorBalanceBefore, distributorBalanceAfter - ((resultBufferTwo[4] * resultBufferTwo[8]) / 100), 'Error: Distributor Payout Incorrect') 
    })

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchSong...()
        const resultBufferOne = await supplyChain.fetchSongBufferOne.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], listenerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMusicianID, 'Error: Missing or Invalid originMusicianID')
        assert.equal(resultBufferOne[4], originMusicianName, 'Error: Missing or Invalid originMusicianName')
        assert.equal(resultBufferOne[5], originMusicianInformation, 'Error: Missing or Invalid originMusicianInformation')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchSong...()
        const resultBufferTwo = await supplyChain.fetchSongBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, "Error: Invalid SKU")
        assert.equal(resultBufferTwo[1], upc, "Error: Invalid UPC")
        assert.equal(resultBufferTwo[2], songID, "Error: Invalid singID")
        assert.equal(resultBufferTwo[3], songNotes, "Error: Invalid songNotes")
        assert.equal(resultBufferTwo[4], songPrice, "Error: Invalid songPrice")
        assert.equal(resultBufferTwo[5], 8, "Error: Invalid songStae")
        assert.equal(resultBufferTwo[6], 30, "Error: Invalid musician shares")
        assert.equal(resultBufferTwo[7], 30, "Error: Invalid producer shares")
        assert.equal(resultBufferTwo[8], 40, "Error: Invalid distributor shares")
        assert.equal(resultBufferTwo[9], producerID, "Error: Invalid producerID")
        assert.equal(resultBufferTwo[10], distributorID, "Error: Invalid distributorID")
        assert.equal(resultBufferTwo[11], listenerID, "Error: Invalid listenerID")

    })

});

